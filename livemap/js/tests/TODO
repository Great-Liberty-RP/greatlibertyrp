
Alerter:
    ☐ Error if not "data" passed to alert
    ☐ Alert should be shown if we pass a string. It'll be the message with default props
    ☐ Test all properties passed to the alerter
Config:
    Test the `getConfigFileFromRemote` function:
         ☐ Should return an error if it cannot fetch "config.json"
         ☐ Returns a JSON object if it can
         ☐ JSON should be returned even if it has comments
         ☐ `Config.staticConfig` should be set after config fetched
         ☐ `Config.defaultConfig` should be used
         ☐ Any properties in config.json should override `Config.defaultConfig`
    ☐ `getConfig` should return `Config.staticConfig`. If it's empty, it should call `getConfigFileFromRemote`... Maybe shouldn't test this?
Controls:
    ☐ onClick handlers should be registered when `initControls` called
    generateBlipControls:
        ☐ Should set ID to `blip_{name}_link`
        ☐ Should set data-blip-number to the blip's ID
    blipButtonClicked:
        ☐ Should either add or remove the blip's ID from `mapWrapper.disabledBlips`.
        ☐ Should add/remove a class depending on whether it's enabled/disabled.
    showBlips_onClick:
        ☐ mapWrapper.showBlips should be toggled
        ☐ `blipsEnabled` element should have the appropriate class
        ☐ `blipsEnabled` should have the correct text to show whether it's enabled/disabled
    toggleAllBlips_onClick:
        ☐ `blipControlToggleAll` should be toggled
        ☐ it should remove/add _all_ blips to `mapWrapper.disabledBlips` depending on `blipsControlToggleAll`
        ☐ blip buttons should have appropriate class
    playerMarker_clusterClick:
        ☐ Should create a list with items having `data-identifier` set
    playerInsideCluster_onClick:
        ☐ should open the player's popup...
    reconnect_onClick:
        ☐ `connection` element should have warning class and "reconnecting" text
        ☐ webSocket should be closed
        ☐ webSocket should be opened with the current server (test seperate)
    serverMenu_onClick:
        ☐ should change the server to the one clicked
    playerMarker_onClick:
        ☐ should open a player's info popup when clicked
    playerSelect_onChange:
        ☐ if value = "" then, `mapWrapper.trackPlayer` should be null & element should have `text-danger` class
    filterOn_onChange:
        ☐ if value = "" then, `mapWrapper.Filter` should be null & element should have `text-danger` class
        ☐ otherwise, `mapWrapper.Filter` is set with object with "on" property set to value & no `text-danger` class
    refreshBlips_onClick:
        ☐ clears all markers
        ☐ adds available markers back onto map
Initializer:
    page:
        ☐ `serverMenu` should add all servers in `config.servers` to a list
    blips:
        ☐ should send a request to the URL for blips file
        ☐ should add all blips to map
        ☐ should give blip a name & "type"
        ☐ `blipCount` element should show number of blips added to map


Utils:
    isNumeric:
        ☐ Should return if a string is a number
    convertToMap:
        ☐ God knows... Maybe hard-coded values and test against output? Need to pass `CurrentLayer` as well so...
    getMapBounds:
        ☐ ¯\_(ツ)_/¯
    convertToMapLeaflet:
        ☐ ¯\_(ツ)_/¯
    stringCoordToFloat:
        ☐ Given an object with strings with `x`, `y` and `z`, they should be converted to float
    getPositionHtml:
        ☐ Should return some HTML with our coords object inside
    getPositionHtmlWith:
        ☐ Same as above but, we pass individual coords instead of an object
    getHtmlForInformation:
        ☐ Should return some HTML with key and value inside
    getInfoHtmlForMarkers:
        ☐ Should return some HTML with name and the "extraHtml" inside
    getPlayerInfoHtml:
        ☐ Should return some HTML with player's info inside
            ☐ pos
            ☐ any key
        ☐ Should NOT add `indentifer` is `Config.showIdentifiers` is false.
    playerNameSorter:
        ☐ Util function for sorting strings alphabetically. Use jest-fuzz?
    getFilterProps:
        ☐ Should return an array of properties that we can filter players with
    optionExists:
        ☐ Should return if a particular option exists in a <select> object
☐ JsonStrip
VersionCheck:
    constructor:
        ☐ Should set properties
            ☐ versionFile = version.json
            ☐ currentVersion = 0.0.0
            ☐ remoteVersion = 4.0.0
            ☐ remoteVersionurl = https://raw.githubusercontent.com/TGRHavoc/live_map-interface/master/version.json
            ☐ semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i
        ☐ Should call `doUpdate`.
    updateInterface:
        ☐ Should set `livemapVersion` to the current version (local version)
    indexOrEnd:
        ☐ Should get the index of text inside the string or, the length of the string if not present
    tryParse:
        ☐ Should parse numbers...
        ☐ If NaN is passed, the original value returned
    validate:
        ☐ Should correctly validate if a string is a version string (tests against semver regex)
    compareVersions:
        ☐ Should return `0` if both versions are the same
        ☐ Should return `1` if `v1` is NEWER than `v2`.
        ☐ Should return `-1` if `v2` is OLDER than `v2`
        ☐ Should throw error if passed a "non version string"
    getCurrentVersion:
        ☐ Should try and fetch `versionFile`
        ☐ Once gotton, it should set `currentVersion` to the `interface` property from the JSON file
        ☐ Should throw an error/reject the promise if we can't fetch the version file && Should show an alert
    getRemoteVersion:
        ☐ Should try and fetch `remoteVersionUrl`
        ☐ Once gotton, it should set `remoteVersion` to the `interface` property from the JSON file
        ☐ Should throw an error/reject the promise if we can't fetch the version file && Should show an alert
    doUpdate:
        ☐ Should call `getCurrentVersion`
        ☐ Should call `updateInterface`
        ☐ Should call `getRemoteVersion`
        ☐ Should compare `currentVersion` and `remoteVersion`
        ☐ If `currentVersion` is old, show an update alert
        ☐ Otherwise, show the success alert


